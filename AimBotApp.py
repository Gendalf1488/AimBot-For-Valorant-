import tkinter as tk
from tkinter import messagebox
import pyautogui
import cv2
import numpy as np
import serial
import threading
import time
from PIL import Image, ImageTk
import base64
import io

# Глобальные переменные
is_active = False  # состояние бота (активен/неактивен)
is_paused = False  # состояние паузы
mode = None        # текущий режим ("single" или "triple")
dark_theme = True  # флаг темной темы
logs_enabled = True  # флаг логов
protection_enabled = True  # защита от одновременного включения режимов

# Ограничение области скриншота (центр экрана)
screen_width, screen_height = pyautogui.size()
region_width, region_height = 50, 50  # размер области (50x50 пикселей)
region_x = (screen_width - region_width) // 2  # центр по ширине
region_y = (screen_height - region_height) // 2  # центр по высоте
region = (region_x, region_y, region_width, region_height)

# Переменная для хранения COM-порта
current_com_port = "COM9"

# Глобальная переменная для работы с ардуино
arduino = None

# Создание графического интерфейса
root = tk.Tk()
root.title("Aim Bot")
root.geometry("400x500")
root.config(bg="#2d2d2d")  # тёмная тема по умолчанию

# Текстовое поле для логов
log_text = tk.Text(root, height=10, width=50, bg="#3d3d3d", fg="white")
log_text.pack(pady=10)

# Функция добавления логов
def add_log(message):
    if logs_enabled:
        log_text.insert(tk.END, message + "\n")
        log_text.see(tk.END)

# Подключение к плате через выбранный COM-порт
def connect_to_arduino():
    global arduino
    try:
        arduino = serial.Serial(current_com_port, 9600)  # Используем выбранный порт
        time.sleep(2)  # ждём инициализации
        add_log(f"Подключено к {current_com_port}")
    except Exception as e:
        add_log(f"Ошибка подключения к {current_com_port}: {e}")

# Функция для изменения COM-порта
def change_com_port(new_port):
    global current_com_port
    if current_com_port != new_port:
        current_com_port = new_port
        add_log(f"Выбран COM-порт: {current_com_port}")
        if is_active:
            reconnect_arduino()  # Просто переподключаемся без дополнительных логов

# Функция для переподключения к плате
def reconnect_arduino():
    global arduino
    if arduino is not None and arduino.is_open:
        arduino.close()  # Закрываем текущее подключение
    connect_to_arduino()  # Подключаемся заново

# Подключаемся к плате при запуске
connect_to_arduino()

# Функция для отправки команды на плату
def send_click():
    if mode == "single":
        arduino.write(b'C')  # отправляем команду "C" (одиночный клик)
    elif mode == "triple":
        for _ in range(3):  # трижды отправляем команду
            arduino.write(b'C')
            time.sleep(0.005)  # задержка между кликами (фиксированная)

# Основной цикл бота
def bot_loop():
    while True:
        if is_active and not is_paused:
            try:
                # Делаем скриншот только центральной части экрана
                screen = pyautogui.screenshot(region=region)
                screen = cv2.cvtColor(np.array(screen), cv2.COLOR_RGB2BGR)
                # Ищем цвет обводки врага (только красный)
                lower_red = np.array([0, 0, 200])
                upper_red = np.array([50, 50, 255])
                mask = cv2.inRange(screen, lower_red, upper_red)
                if np.any(mask):  # если нашли цвет
                    print("Цель найдена! Отправляем клик на плату!")
                    send_click()  # вызываем функцию клика в зависимости от режима
                else:
                    print("Цель не найдена.")
                time.sleep(0.1)  # задержка чтобы не нагружать процессор
            except Exception as e:
                print(f"Ошибка: {e}")
        else:
            time.sleep(0.1)  # задержка при паузе чтобы не грузить процессор

# Функция для старта/стопа бота
def toggle_bot():
    global is_active
    is_active = not is_active
    if is_active:
        btn_start.config(text="Стоп", bg="red")
        add_log("Бот запущен.")
        threading.Thread(target=bot_loop, daemon=True).start()
    else:
        btn_start.config(text="Старт", bg="green")
        add_log("Бот остановлен.")

# Функция для паузы бота
def toggle_pause():
    global is_paused
    is_paused = not is_paused
    if is_paused:
        blink_pause_button()
        add_log("Бот поставлен на паузу.")
    else:
        btn_pause.config(bg="#4d4d4d" if dark_theme else "lightgray")
        add_log("Пауза снята.")

# Плавное мигание кнопки паузы
def blink_pause_button():
    if is_paused:
        current_color = btn_pause.cget("bg")
        if current_color == "#4d4d4d":  # Серый
            new_color = "blue"
        elif current_color == "blue":  # Синий
            new_color = "#4d4d4d"
        btn_pause.config(bg=new_color)
        root.after(500, blink_pause_button)  # Мигание каждые 500 мс

# Функция для изменения темы
def toggle_theme():
    global dark_theme
    dark_theme = not dark_theme
    update_theme()

def update_theme():
    if dark_theme:
        root.config(bg="#2d2d2d")
        for btn in [btn_start, btn_single, btn_triple, btn_pause]:
            btn.config(bg="#4d4d4d", fg="white")
        settings_frame.config(bg="#2d2d2d")
        settings_menu.config(bg="#2d2d2d", fg="white")
        theme_check.config(bg="#2d2d2d", fg="white", selectcolor="#2d2d2d")
        logs_check.config(bg="#2d2d2d", fg="white", selectcolor="#2d2d2d")
        protection_check.config(bg="#2d2d2d", fg="white", selectcolor="#2d2d2d")
    else:
        root.config(bg="white")
        for btn in [btn_start, btn_single, btn_triple, btn_pause]:
            btn.config(bg="lightgray", fg="black")
        settings_frame.config(bg="white")
        settings_menu.config(bg="white", fg="black")
        theme_check.config(bg="white", fg="black", selectcolor="white")
        logs_check.config(bg="white", fg="black", selectcolor="white")
        protection_check.config(bg="white", fg="black", selectcolor="white")

# Функция для включения/выключения логов
def toggle_logs():
    global logs_enabled
    logs_enabled = not logs_enabled
    if logs_enabled:
        add_log("Логи включены.")
    else:
        add_log("Логи выключены.")

# Функция для защиты от одновременного включения режимов
def set_mode(new_mode):
    global mode
    if protection_enabled:
        if mode == new_mode:
            mode = None
            update_button_colors()
            add_log(f"Режим '{new_mode}' отключен.")
        elif mode is not None:
            add_log(f"Режим '{mode}' уже активен. Отключите его для выбора нового.")
        else:
            mode = new_mode
            update_button_colors()
            add_log(f"Режим '{new_mode}' активирован.")
    update_button_colors()

# Функция для обновления цветов кнопок
def update_button_colors():
    btn_single.config(bg="red" if mode == "single" else "#4d4d4d" if dark_theme else "lightgray")
    btn_triple.config(bg="red" if mode == "triple" else "#4d4d4d" if dark_theme else "lightgray")

# Встроенная иконка в формате base64
icon_base64 =""""""

# Декодируем base64 строку
icon_data = base64.b64decode(icon_base64)

# Создаем фотоизображение из данных
icon_photo = tk.PhotoImage(data=icon_data)

# Преобразование base64 в изображение
icon_data = base64.b64decode(icon_base64)
icon_image = Image.open(io.BytesIO(icon_data))
icon_photo = ImageTk.PhotoImage(icon_image)

# Установка иконки окна
root.tk.call('wm', 'iconphoto', root._w, icon_photo)

# Фрейм для кнопки настроек
settings_frame = tk.Frame(root, bg="#2d2d2d" if dark_theme else "white")
settings_frame.pack(side=tk.TOP, fill=tk.X, pady=5)

# Кнопка настроек
settings_menu = tk.Menubutton(settings_frame, text="Настройки", relief="raised", bg="#4d4d4d", fg="white")
settings_menu.pack(side=tk.LEFT, padx=10)
settings_dropdown = tk.Menu(settings_menu, tearoff=0)
settings_menu.config(menu=settings_dropdown)

# Переменные для настроек
theme_var = tk.BooleanVar(value=dark_theme)
logs_var = tk.BooleanVar(value=logs_enabled)
protection_var = tk.BooleanVar(value=protection_enabled)

# Элементы выпадающего меню
theme_check = tk.Checkbutton(root, text="Тёмная тема", variable=theme_var, command=toggle_theme, bg="#4d4d4d", fg="white", selectcolor="#2d2d2d")
logs_check = tk.Checkbutton(root, text="Включить логи", variable=logs_var, command=toggle_logs, bg="#4d4d4d", fg="white", selectcolor="#2d2d2d")
protection_check = tk.Checkbutton(root, text="Защита от одновременного включения", variable=protection_var, command=lambda: toggle_protection(), bg="#4d4d4d", fg="white", selectcolor="#2d2d2d")
settings_dropdown.add_checkbutton(label="Тёмная тема", variable=theme_var, command=toggle_theme)
settings_dropdown.add_checkbutton(label="Включить логи", variable=logs_var, command=toggle_logs)
settings_dropdown.add_checkbutton(label="Защита от одновременного включения", variable=protection_var, command=lambda: toggle_protection())

# Добавляем выбор COM-порта
com_port_var = tk.StringVar(value=current_com_port)
com_ports = ["COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10"]

# Создаем подменю для COM-портов
com_port_submenu = tk.Menu(settings_dropdown, tearoff=0)
for port in com_ports:
    com_port_submenu.add_radiobutton(label=port, variable=com_port_var, value=port, 
                                       command=lambda p=port: change_com_port(p))

# Добавляем кнопку "Выбрать COM-порт" в основное меню
settings_dropdown.add_cascade(label="Выбрать COM-порт", menu=com_port_submenu)

# Добавляем кнопку "Переподключиться" в меню настроек
settings_dropdown.add_command(label="Переподключиться", command=reconnect_arduino)

# Фрейм для кнопок управления
control_frame = tk.Frame(root, bg="#2d2d2d" if dark_theme else "white")
control_frame.pack(pady=5)

# Левая колонка: кнопка "Старт"
btn_start = tk.Button(control_frame, text="Старт", command=toggle_bot, width=10, bg="green", fg="white")
btn_start.grid(row=0, column=0, padx=5)

# Центральная колонка: кнопки режимов
btn_single = tk.Button(control_frame, text="Одиночный", command=lambda: set_mode("single"), width=10, bg="#4d4d4d", fg="white")
btn_single.grid(row=0, column=1, padx=5)
btn_triple = tk.Button(control_frame, text="Тройной", command=lambda: set_mode("triple"), width=10, bg="#4d4d4d", fg="white")
btn_triple.grid(row=1, column=1, padx=5)

# Правая колонка: кнопка "Пауза"
btn_pause = tk.Button(control_frame, text="Пауза", command=toggle_pause, width=10, bg="#4d4d4d", fg="white")
btn_pause.grid(row=0, column=2, padx=5)

# Применяем тему
update_theme()

# Запуск интерфейса
root.mainloop()